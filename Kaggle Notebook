{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "be348b5e",
   "metadata": {
    "papermill": {
     "duration": 0.004917,
     "end_time": "2025-04-28T00:51:03.083641",
     "exception": false,
     "start_time": "2025-04-28T00:51:03.078724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Imports and setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56f73a88",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:03.092584Z",
     "iopub.status.busy": "2025-04-28T00:51:03.092331Z",
     "iopub.status.idle": "2025-04-28T00:51:17.978829Z",
     "shell.execute_reply": "2025-04-28T00:51:17.978040Z"
    },
    "papermill": {
     "duration": 14.89257,
     "end_time": "2025-04-28T00:51:17.980309",
     "exception": false,
     "start_time": "2025-04-28T00:51:03.087739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-28 00:51:06.710996: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745801466.920293      20 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745801466.977900      20 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Imports and setup\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image\n",
    "import cv2\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import gc\n",
    "from tqdm.notebook import tqdm\n",
    "import time\n",
    "import threading\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "np.random.seed(42)\n",
    "tf.random.set_seed(42)\n",
    "\n",
    "# Define paths\n",
    "DATA_PATH = \"/kaggle/input/byu-locating-bacterial-flagellar-motors-2025/\"\n",
    "TRAIN_PATH = os.path.join(DATA_PATH, \"train\")\n",
    "TRAIN_LABELS = os.path.join(DATA_PATH, \"train_labels.csv\")\n",
    "TEST_PATH = os.path.join(DATA_PATH, \"test\")\n",
    "SUBMISSION_PATH = \"/kaggle/working/submission.csv\"\n",
    "\n",
    "# Detection parameters \n",
    "CONFIDENCE_THRESHOLD = 0.35  # Threshold for considering a detection\n",
    "NMS_IOU_THRESHOLD = 0.2     # IoU threshold for 3D NMS clustering\n",
    "MAX_DETECTIONS_PER_TOMO = 1 # Maximum number of motors per tomogram (for test set)\n",
    "IMAGE_SIZE = (224, 224)     # Size to resize slices to\n",
    "BATCH_SIZE = 6              # Default batch size, will be adjusted dynamically"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c330826",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:17.989890Z",
     "iopub.status.busy": "2025-04-28T00:51:17.989477Z",
     "iopub.status.idle": "2025-04-28T00:51:17.992905Z",
     "shell.execute_reply": "2025-04-28T00:51:17.992394Z"
    },
    "papermill": {
     "duration": 0.009152,
     "end_time": "2025-04-28T00:51:17.993862",
     "exception": false,
     "start_time": "2025-04-28T00:51:17.984710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Disable mixed precision globally to avoid type mismatches\n",
    "tf.keras.mixed_precision.set_global_policy('float32')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "531bd50f",
   "metadata": {
    "papermill": {
     "duration": 0.003683,
     "end_time": "2025-04-28T00:51:18.001562",
     "exception": false,
     "start_time": "2025-04-28T00:51:17.997879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Memory managment and utitlity functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad8f8c39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.010014Z",
     "iopub.status.busy": "2025-04-28T00:51:18.009803Z",
     "iopub.status.idle": "2025-04-28T00:51:18.016096Z",
     "shell.execute_reply": "2025-04-28T00:51:18.015612Z"
    },
    "papermill": {
     "duration": 0.011685,
     "end_time": "2025-04-28T00:51:18.017113",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.005428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Memory management and GPU optimization\n",
    "def clear_memory():\n",
    "    \"\"\"Clear memory to prevent OOM errors\"\"\"\n",
    "    gc.collect()\n",
    "    \n",
    "    # If GPU is available, also clear GPU memory\n",
    "    if tf.config.list_physical_devices('GPU'):\n",
    "        tf.keras.backend.clear_session()\n",
    "\n",
    "def optimize_gpu():\n",
    "    \"\"\"Configure GPU settings for optimal performance with safe mixed precision\"\"\"\n",
    "    # Check for GPU availability\n",
    "    gpus = tf.config.list_physical_devices('GPU')\n",
    "    \n",
    "    if len(gpus) > 0:\n",
    "        print(f\"Found {len(gpus)} GPU(s)\")\n",
    "        \n",
    "        # Enable memory growth to avoid OOM errors\n",
    "        for gpu in gpus:\n",
    "            try:\n",
    "                tf.config.experimental.set_memory_growth(gpu, True)\n",
    "                print(f\"Memory growth enabled for {gpu}\")\n",
    "            except RuntimeError as e:\n",
    "                print(f\"Error setting memory growth: {e}\")\n",
    "        \n",
    "        # For mixed precision, we'll disable policy and use explicit type casting instead\n",
    "        # This avoids incompatible type errors\n",
    "        print(\"Using explicit type casting for mixed precision operations\")\n",
    "        \n",
    "        # Set XLA optimization for faster execution\n",
    "        tf.config.optimizer.set_jit(True)\n",
    "        print(\"XLA JIT compilation enabled\")\n",
    "        \n",
    "        # Estimate reasonable batch size based on GPU memory\n",
    "        batch_size = 6  # Default batch size for GPU\n",
    "        return batch_size, True\n",
    "    else:\n",
    "        print(\"No GPU found\")\n",
    "        return 4, False  # Reduced batch size for CPU\n",
    "\n",
    "# Timer class for profiling\n",
    "class Timer:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "        self.start_time = None\n",
    "    \n",
    "    def __enter__(self):\n",
    "        self.start_time = time.time()\n",
    "        return self\n",
    "    \n",
    "    def __exit__(self, *args):\n",
    "        elapsed = time.time() - self.start_time\n",
    "        print(f\"[TIMER] {self.name}: {elapsed:.3f}s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03eca4fc",
   "metadata": {
    "papermill": {
     "duration": 0.003783,
     "end_time": "2025-04-28T00:51:18.024906",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.021123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Image processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "19c86b9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.033438Z",
     "iopub.status.busy": "2025-04-28T00:51:18.033211Z",
     "iopub.status.idle": "2025-04-28T00:51:18.039376Z",
     "shell.execute_reply": "2025-04-28T00:51:18.038823Z"
    },
    "papermill": {
     "duration": 0.011652,
     "end_time": "2025-04-28T00:51:18.040421",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.028769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Image processing functions\n",
    "def normalize_slice(slice_data):\n",
    "    \"\"\"Normalize slice data using 2nd and 98th percentiles for better contrast\"\"\"\n",
    "    p2 = np.percentile(slice_data, 2)\n",
    "    p98 = np.percentile(slice_data, 98)\n",
    "    clipped_data = np.clip(slice_data, p2, p98)\n",
    "    normalized = 255 * (clipped_data - p2) / (p98 - p2)\n",
    "    return np.uint8(normalized)\n",
    "\n",
    "def enhance_slice(slice_img):\n",
    "    \"\"\"Apply preprocessing to enhance motor features in a slice\"\"\"\n",
    "    # Convert to uint8 if needed\n",
    "    if slice_img.dtype != np.uint8:\n",
    "        slice_img = slice_img.astype(np.uint8)\n",
    "        \n",
    "    # Apply CLAHE for contrast enhancement\n",
    "    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))\n",
    "    enhanced = clahe.apply(slice_img)\n",
    "    \n",
    "    # Apply light Gaussian blur to reduce noise\n",
    "    enhanced = cv2.GaussianBlur(enhanced, (3, 3), 0)\n",
    "    \n",
    "    # Apply histogram equalization for better feature visibility\n",
    "    enhanced = cv2.equalizeHist(enhanced)\n",
    "    \n",
    "    return enhanced\n",
    "\n",
    "def preload_image_batch(file_paths):\n",
    "    \"\"\"Preload a batch of images to CPU memory\"\"\"\n",
    "    images = []\n",
    "    for path in file_paths:\n",
    "        try:\n",
    "            # First try OpenCV\n",
    "            img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n",
    "            if img is None:\n",
    "                # Fallback to PIL\n",
    "                img = np.array(Image.open(path).convert('L'))\n",
    "            \n",
    "            # Apply enhancement\n",
    "            img = enhance_slice(img)\n",
    "            images.append(img)\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading image {path}: {e}\")\n",
    "            # Add empty image as fallback\n",
    "            images.append(np.zeros((IMAGE_SIZE[0], IMAGE_SIZE[1]), dtype=np.uint8))\n",
    "    return images"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de836357",
   "metadata": {
    "papermill": {
     "duration": 0.00369,
     "end_time": "2025-04-28T00:51:18.048145",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.044455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Data prep and loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3bb58d17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.057082Z",
     "iopub.status.busy": "2025-04-28T00:51:18.056896Z",
     "iopub.status.idle": "2025-04-28T00:51:18.078270Z",
     "shell.execute_reply": "2025-04-28T00:51:18.077746Z"
    },
    "papermill": {
     "duration": 0.027169,
     "end_time": "2025-04-28T00:51:18.079247",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.052078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dataset preparation and loading\n",
    "def create_train_val_split(labels_df, val_fraction=0.2, random_state=42):\n",
    "    \"\"\"Split the data into training and validation sets by tomogram ID\"\"\"\n",
    "    unique_ids = labels_df['tomo_id'].unique()\n",
    "    np.random.seed(random_state)\n",
    "    np.random.shuffle(unique_ids)\n",
    "    \n",
    "    split_idx = int(len(unique_ids) * (1 - val_fraction))\n",
    "    train_ids = unique_ids[:split_idx]\n",
    "    val_ids = unique_ids[split_idx:]\n",
    "    \n",
    "    return train_ids, val_ids\n",
    "\n",
    "# Data generator for efficient loading\n",
    "class TomogramDataGenerator(tf.keras.utils.Sequence):\n",
    "    def __init__(self, tomo_ids, labels_df=None, batch_size=1, shuffle=True,\n",
    "                 slice_sampling_factor=0.5, max_slices=64, resize=(320, 320),\n",
    "                 is_test=False, augment=False):\n",
    "        \n",
    "        self.tomo_ids = tomo_ids\n",
    "        self.labels_df = labels_df\n",
    "        self.batch_size = batch_size\n",
    "        self.shuffle = shuffle\n",
    "        self.slice_sampling_factor = slice_sampling_factor\n",
    "        self.max_slices = max_slices\n",
    "        self.resize = resize\n",
    "        self.is_test = is_test\n",
    "        self.augment = augment\n",
    "        self.data_path = TEST_PATH if is_test else TRAIN_PATH\n",
    "        \n",
    "        # Precompute tomogram metadata for more efficient loading\n",
    "        self.tomo_metadata = {}\n",
    "        \n",
    "        for tomo_id in self.tomo_ids:\n",
    "            # Get info about this tomogram\n",
    "            if not is_test and labels_df is not None:\n",
    "                tomo_info = labels_df[labels_df['tomo_id'] == tomo_id]\n",
    "                if len(tomo_info) > 0:\n",
    "                    tomo_info = tomo_info.iloc[0]\n",
    "                    self.tomo_metadata[tomo_id] = {\n",
    "                        'shape': (\n",
    "                            int(tomo_info['Array shape (axis 0)']),\n",
    "                            int(tomo_info['Array shape (axis 1)']),\n",
    "                            int(tomo_info['Array shape (axis 2)'])\n",
    "                        ),\n",
    "                        'spacing': float(tomo_info['Voxel spacing']),\n",
    "                        'motor_count': int(tomo_info['Number of motors'])\n",
    "                    }\n",
    "            else:\n",
    "                # For test data, determine the shape when loading\n",
    "                folder_path = os.path.join(self.data_path, tomo_id)\n",
    "                slice_files = sorted([f for f in os.listdir(folder_path) \n",
    "                                     if f.startswith('slice_') and f.endswith('.jpg')])\n",
    "                \n",
    "                # Sample first slice to get dimensions\n",
    "                sample_path = os.path.join(folder_path, slice_files[0])\n",
    "                with Image.open(sample_path) as img:\n",
    "                    width, height = img.size\n",
    "                \n",
    "                self.tomo_metadata[tomo_id] = {\n",
    "                    'shape': (len(slice_files), height, width),\n",
    "                    'slice_count': len(slice_files)\n",
    "                }\n",
    "        \n",
    "        self.on_epoch_end()\n",
    "    \n",
    "    def __len__(self):\n",
    "        \"\"\"Number of batches per epoch\"\"\"\n",
    "        return int(np.ceil(len(self.tomo_ids) / self.batch_size))\n",
    "    \n",
    "    def __getitem__(self, index):\n",
    "        \"\"\"Generate one batch of data\"\"\"\n",
    "        # Get tomogram IDs for this batch\n",
    "        batch_ids = self.tomo_ids[index * self.batch_size:\n",
    "                                  min((index + 1) * self.batch_size, len(self.tomo_ids))]\n",
    "        \n",
    "        # Initialize batch arrays\n",
    "        batch_x = []\n",
    "        batch_y = []\n",
    "        \n",
    "        # Generate data for each tomogram in the batch\n",
    "        for tomo_id in batch_ids:\n",
    "            # Load the 3D volume\n",
    "            volume = self._load_tomogram(tomo_id)\n",
    "            batch_x.append(volume)\n",
    "            \n",
    "            if not self.is_test and self.labels_df is not None:\n",
    "                # Get the labels for training data\n",
    "                motor_locations = self._get_motor_locations(tomo_id)\n",
    "                batch_y.append(motor_locations)\n",
    "        \n",
    "        # Convert to numpy arrays\n",
    "        batch_x = np.array(batch_x, dtype=np.float32)\n",
    "        \n",
    "        if not self.is_test and self.labels_df is not None:\n",
    "            batch_y = np.array(batch_y, dtype=np.float32)\n",
    "            return batch_x, batch_y\n",
    "        else:\n",
    "            return batch_x, batch_ids\n",
    "    \n",
    "    def _load_tomogram(self, tomo_id):\n",
    "        \"\"\"Load a tomogram with sampling to fit in memory\"\"\"\n",
    "        folder_path = os.path.join(self.data_path, tomo_id)\n",
    "        \n",
    "        # Get all slice files\n",
    "        slice_files = sorted([f for f in os.listdir(folder_path) \n",
    "                             if f.startswith('slice_') and f.endswith('.jpg')])\n",
    "        \n",
    "        # Use higher sampling for test data\n",
    "        actual_sampling_factor = 0.8 if self.is_test else self.slice_sampling_factor\n",
    "        \n",
    "        # Apply slice sampling to reduce memory usage\n",
    "        if actual_sampling_factor < 1.0:\n",
    "            num_slices = max(int(len(slice_files) * actual_sampling_factor), 1)\n",
    "            indices = np.linspace(0, len(slice_files) - 1, num_slices, dtype=int)\n",
    "            slice_files = [slice_files[i] for i in indices]\n",
    "        \n",
    "        # Ensure we have exactly max_slices\n",
    "        if self.max_slices:\n",
    "            if len(slice_files) > self.max_slices:\n",
    "                # If more slices than needed, sample evenly\n",
    "                indices = np.linspace(0, len(slice_files) - 1, self.max_slices, dtype=int)\n",
    "                slice_files = [slice_files[i] for i in indices]\n",
    "            elif len(slice_files) < self.max_slices:\n",
    "                # If fewer slices than needed, pad with repeats of nearby slices\n",
    "                needed = self.max_slices - len(slice_files)\n",
    "                padding = []\n",
    "                for i in range(needed):\n",
    "                    idx = min(i % len(slice_files), len(slice_files)-1)\n",
    "                    padding.append(slice_files[idx])\n",
    "                slice_files = slice_files + padding\n",
    "        \n",
    "        # Initialize volume with correct shape\n",
    "        height, width = self.resize\n",
    "        volume = np.zeros((len(slice_files), height, width, 1), dtype=np.float32)\n",
    "        \n",
    "        # Process each slice\n",
    "        for i, slice_file in enumerate(slice_files):\n",
    "            try:\n",
    "                # Load and process the slice efficiently\n",
    "                slice_path = os.path.join(folder_path, slice_file)\n",
    "                \n",
    "                # Using PIL for loading\n",
    "                with Image.open(slice_path) as img:\n",
    "                    if self.resize:\n",
    "                        img = img.resize(self.resize, Image.BICUBIC)\n",
    "                    \n",
    "                    # Convert to numpy array\n",
    "                    img_array = np.array(img.convert('L'), dtype=np.float32)\n",
    "                    \n",
    "                    # Apply enhancement for better feature visibility\n",
    "                    img_array = enhance_slice(img_array.astype(np.uint8)).astype(np.float32)\n",
    "                    \n",
    "                    # Normalize to [0,1] range\n",
    "                    img_array = img_array / 255.0\n",
    "                \n",
    "                # Add channel dimension\n",
    "                img_array = np.expand_dims(img_array, axis=-1)\n",
    "                \n",
    "                # Store in volume\n",
    "                volume[i, :, :, 0] = img_array[:, :, 0]\n",
    "                \n",
    "                # Force garbage collection periodically\n",
    "                if i % 20 == 0:\n",
    "                    gc.collect()\n",
    "            \n",
    "            except Exception as e:\n",
    "                print(f\"Error loading slice {slice_file} from {tomo_id}: {e}\")\n",
    "                # Fill with zeros on error\n",
    "                volume[i, :, :, 0] = 0\n",
    "        \n",
    "        # Apply data augmentation if needed\n",
    "        if self.augment and not self.is_test:\n",
    "            volume = self._augment_volume(volume)\n",
    "        \n",
    "        return volume\n",
    "    \n",
    "    def _augment_volume(self, volume):\n",
    "        \"\"\"Apply simple 3D data augmentation to the volume\"\"\"\n",
    "        # Only apply augmentation with 50% probability\n",
    "        if np.random.rand() < 0.5:\n",
    "            return volume\n",
    "        \n",
    "        # Apply a random transformation\n",
    "        aug_type = np.random.choice(['flip', 'rotate', 'noise'])\n",
    "        \n",
    "        if aug_type == 'flip':\n",
    "            # Flip in y or x direction\n",
    "            axis = np.random.choice([1, 2])\n",
    "            volume = np.flip(volume, axis=axis)\n",
    "        \n",
    "        elif aug_type == 'rotate':\n",
    "            # 90, 180, or 270 degree rotation in the y-x plane\n",
    "            k = np.random.choice([1, 2, 3])\n",
    "            volume = np.rot90(volume, k=k, axes=(1, 2))\n",
    "        \n",
    "        elif aug_type == 'noise':\n",
    "            # Add random noise\n",
    "            noise_level = np.random.uniform(0.01, 0.05)\n",
    "            noise = np.random.normal(0, noise_level, volume.shape)\n",
    "            volume = np.clip(volume + noise, 0, 1)\n",
    "        \n",
    "        return volume\n",
    "    \n",
    "    def _get_motor_locations(self, tomo_id):\n",
    "        \"\"\"Get motor locations with coordinates normalized to [0,1]\"\"\"\n",
    "        # Get all motor labels for this tomogram\n",
    "        tomo_labels = self.labels_df[self.labels_df['tomo_id'] == tomo_id]\n",
    "        \n",
    "        # Get tomogram shape from metadata\n",
    "        if tomo_id in self.tomo_metadata:\n",
    "            tomo_shape = self.tomo_metadata[tomo_id]['shape']\n",
    "        else:\n",
    "            # Fallback shape if metadata not available\n",
    "            tomo_shape = (100, 100, 100)  # Default values\n",
    "        \n",
    "        # For simplified detection, we'll use a single tensor\n",
    "        # [has_motor, z, y, x] where coordinates are normalized to [0,1]\n",
    "        # Return shape will be [1, 4]\n",
    "        motor_locations = np.zeros((1, 4), dtype=np.float32)\n",
    "        \n",
    "        # If no motors, return zero tensor\n",
    "        if len(tomo_labels) == 0:\n",
    "            return motor_locations\n",
    "        \n",
    "        # For simplicity, use only first motor if multiple exist\n",
    "        motor = tomo_labels.iloc[0]\n",
    "        \n",
    "        # Extract 3D coordinates\n",
    "        z = float(motor['Motor axis 0'])\n",
    "        y = float(motor['Motor axis 1'])\n",
    "        x = float(motor['Motor axis 2'])\n",
    "        \n",
    "        # Skip invalid coordinates\n",
    "        if z < 0 or y < 0 or x < 0:\n",
    "            return motor_locations\n",
    "        \n",
    "        # Normalize coordinates to [0,1] range\n",
    "        z_norm = z / tomo_shape[0]\n",
    "        y_norm = y / tomo_shape[1]\n",
    "        x_norm = x / tomo_shape[2]\n",
    "        \n",
    "        # Store [has_motor, z_norm, y_norm, x_norm]\n",
    "        motor_locations[0] = [1.0, z_norm, y_norm, x_norm]\n",
    "        \n",
    "        return motor_locations\n",
    "    \n",
    "    def on_epoch_end(self):\n",
    "        \"\"\"Updates indexes after each epoch\"\"\"\n",
    "        if self.shuffle:\n",
    "            np.random.shuffle(self.tomo_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b8cb3ca",
   "metadata": {
    "papermill": {
     "duration": 0.003752,
     "end_time": "2025-04-28T00:51:18.086850",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.083098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "933174e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.095905Z",
     "iopub.status.busy": "2025-04-28T00:51:18.095336Z",
     "iopub.status.idle": "2025-04-28T00:51:18.101571Z",
     "shell.execute_reply": "2025-04-28T00:51:18.101008Z"
    },
    "papermill": {
     "duration": 0.011951,
     "end_time": "2025-04-28T00:51:18.102738",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.090787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Simple 3D CNN for motor detection\n",
    "def build_3d_detection_model(input_shape):\n",
    "    \"\"\"Build a 3D CNN model for motor detection\"\"\"\n",
    "    # Start with normalized inputs [0,1]\n",
    "    inputs = layers.Input(shape=input_shape)\n",
    "    \n",
    "    # Encoder - downsampling path\n",
    "    # Block 1\n",
    "    x = layers.Conv3D(16, kernel_size=3, padding='same')(inputs)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    x = layers.MaxPooling3D(pool_size=(2, 2, 2))(x)\n",
    "    \n",
    "    # Block 2\n",
    "    x = layers.Conv3D(32, kernel_size=3, padding='same')(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    x = layers.MaxPooling3D(pool_size=(2, 2, 2))(x)\n",
    "    \n",
    "    # Block 3\n",
    "    x = layers.Conv3D(64, kernel_size=3, padding='same')(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    x = layers.MaxPooling3D(pool_size=(2, 2, 2))(x)\n",
    "    \n",
    "    # Block 4\n",
    "    x = layers.Conv3D(128, kernel_size=3, padding='same')(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    x = layers.MaxPooling3D(pool_size=(2, 2, 2))(x)\n",
    "    \n",
    "    # Global features\n",
    "    x = layers.GlobalAveragePooling3D()(x)\n",
    "    x = layers.Dense(128)(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    x = layers.Dropout(0.3)(x)\n",
    "    \n",
    "    # Detection head - outputs a flat tensor with 4 values\n",
    "    outputs = layers.Dense(4)(x)\n",
    "    \n",
    "    # Create model\n",
    "    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3568aa2",
   "metadata": {
    "papermill": {
     "duration": 0.003716,
     "end_time": "2025-04-28T00:51:18.110323",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.106607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6. loss function and metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "db7ff14c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.119179Z",
     "iopub.status.busy": "2025-04-28T00:51:18.118998Z",
     "iopub.status.idle": "2025-04-28T00:51:18.128113Z",
     "shell.execute_reply": "2025-04-28T00:51:18.127604Z"
    },
    "papermill": {
     "duration": 0.014776,
     "end_time": "2025-04-28T00:51:18.129018",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.114242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Simplified loss function for motor detection with mixed precision handling\n",
    "def motor_detection_loss(y_true, y_pred):\n",
    "    \"\"\"\n",
    "    Custom loss function for 3D motor detection with mixed precision support\n",
    "    \n",
    "    Args:\n",
    "        y_true: Ground truth tensor \n",
    "        y_pred: Predicted tensor\n",
    "        \n",
    "    Returns:\n",
    "        Combined loss value\n",
    "    \"\"\"\n",
    "    # Cast both tensors to same type (float32) to avoid mixed precision issues\n",
    "    y_true = tf.cast(y_true, tf.float32)\n",
    "    y_pred = tf.cast(y_pred, tf.float32)\n",
    "    \n",
    "    # Reshape tensors if needed to ensure consistent shape\n",
    "    y_true = tf.reshape(y_true, [-1, 4])\n",
    "    y_pred = tf.reshape(y_pred, [-1, 4])\n",
    "    \n",
    "    # Split into confidence and coordinates\n",
    "    true_conf = y_true[:, 0:1]  # Shape: [batch_size, 1]\n",
    "    pred_conf = y_pred[:, 0:1]  # Shape: [batch_size, 1]\n",
    "    true_coords = y_true[:, 1:4]  # Shape: [batch_size, 3]\n",
    "    pred_coords = y_pred[:, 1:4]  # Shape: [batch_size, 3]\n",
    "    \n",
    "    # Binary cross-entropy loss for confidence\n",
    "    bce = tf.keras.losses.BinaryCrossentropy(from_logits=False)\n",
    "    conf_loss = bce(true_conf, pred_conf)\n",
    "    \n",
    "    # Mean squared error loss for coordinates, but only when motor exists\n",
    "    # Create a mask for samples with motors\n",
    "    motor_mask = tf.cast(true_conf > 0.5, tf.float32)\n",
    "    \n",
    "    # Compute coordinate loss only for positive samples\n",
    "    coord_error = tf.reduce_sum(tf.square(true_coords - pred_coords), axis=1, keepdims=True)\n",
    "    \n",
    "    # Apply mask and take mean\n",
    "    masked_error = coord_error * motor_mask\n",
    "    coord_loss = tf.reduce_sum(masked_error) / (tf.reduce_sum(motor_mask) + 1e-7)\n",
    "    \n",
    "    # Combine losses with weighting\n",
    "    # Coordinate loss is weighted higher to ensure accurate localization\n",
    "    total_loss = conf_loss + 5.0 * coord_loss\n",
    "    \n",
    "    return total_loss\n",
    "\n",
    "# Custom metrics for training with mixed precision support\n",
    "def detection_accuracy(y_true, y_pred):\n",
    "    \"\"\"Accuracy of motor detection with mixed precision support\"\"\"\n",
    "    # Cast to same type\n",
    "    y_true = tf.cast(y_true, tf.float32)\n",
    "    y_pred = tf.cast(y_pred, tf.float32)\n",
    "    \n",
    "    # Reshape if needed\n",
    "    y_true = tf.reshape(y_true, [-1, 4])\n",
    "    y_pred = tf.reshape(y_pred, [-1, 4])\n",
    "    \n",
    "    # Get confidence values\n",
    "    true_conf = y_true[:, 0]\n",
    "    pred_conf = y_pred[:, 0]\n",
    "    \n",
    "    # Convert to binary predictions\n",
    "    true_positive = tf.cast(true_conf > 0.5, tf.float32)\n",
    "    pred_positive = tf.cast(pred_conf > 0.5, tf.float32)\n",
    "    \n",
    "    # Compute accuracy\n",
    "    correct = tf.cast(tf.equal(true_positive, pred_positive), tf.float32)\n",
    "    accuracy = tf.reduce_mean(correct)\n",
    "    \n",
    "    return accuracy\n",
    "\n",
    "def coordinate_error(y_true, y_pred):\n",
    "    \"\"\"Mean coordinate error for true positives with mixed precision support\"\"\"\n",
    "    # Cast to same type\n",
    "    y_true = tf.cast(y_true, tf.float32)\n",
    "    y_pred = tf.cast(y_pred, tf.float32)\n",
    "    \n",
    "    # Reshape if needed\n",
    "    y_true = tf.reshape(y_true, [-1, 4])\n",
    "    y_pred = tf.reshape(y_pred, [-1, 4])\n",
    "    \n",
    "    # Get confidence and coordinates\n",
    "    true_conf = y_true[:, 0]\n",
    "    pred_conf = y_pred[:, 0]\n",
    "    true_coords = y_true[:, 1:4]\n",
    "    pred_coords = y_pred[:, 1:4]\n",
    "    \n",
    "    # Only compute for true positives\n",
    "    mask = tf.logical_and(true_conf > 0.5, pred_conf > 0.5)\n",
    "    mask = tf.cast(mask, tf.float32)\n",
    "    \n",
    "    # Expand mask for element-wise multiplication\n",
    "    mask_expanded = tf.expand_dims(mask, axis=-1)\n",
    "    mask_expanded = tf.tile(mask_expanded, [1, 3])\n",
    "    \n",
    "    # Apply mask to coordinates before computing difference\n",
    "    masked_true_coords = true_coords * mask_expanded\n",
    "    masked_pred_coords = pred_coords * mask_expanded\n",
    "    \n",
    "    # Calculate squared differences safely\n",
    "    squared_diff = tf.reduce_sum(tf.square(masked_true_coords - masked_pred_coords), axis=1)\n",
    "    \n",
    "    # Mean error over true positives\n",
    "    total_true_pos = tf.reduce_sum(mask) + 1e-7  # Avoid division by zero\n",
    "    mean_error = tf.reduce_sum(tf.sqrt(squared_diff) * mask) / total_true_pos\n",
    "    \n",
    "    return mean_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0623c33",
   "metadata": {
    "papermill": {
     "duration": 0.003749,
     "end_time": "2025-04-28T00:51:18.136580",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.132831",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 7.  Train model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b8cdf949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.145389Z",
     "iopub.status.busy": "2025-04-28T00:51:18.145172Z",
     "iopub.status.idle": "2025-04-28T00:51:18.150864Z",
     "shell.execute_reply": "2025-04-28T00:51:18.150376Z"
    },
    "papermill": {
     "duration": 0.011401,
     "end_time": "2025-04-28T00:51:18.151853",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.140452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Training function\n",
    "def train_model(train_generator, val_generator, input_shape, epochs=20, \n",
    "                learning_rate=0.001, model_path='best_motor_model.keras'):\n",
    "    \"\"\"Train the motor detection model\"\"\"\n",
    "    # Disable mixed precision globally to avoid type mismatches\n",
    "    tf.keras.mixed_precision.set_global_policy('float32')\n",
    "    \n",
    "    # Create model\n",
    "    model = build_3d_detection_model(input_shape)\n",
    "    \n",
    "    # Use Adam optimizer without dtype parameter\n",
    "    optimizer = Adam(learning_rate=learning_rate)\n",
    "    \n",
    "    # Compile model with custom loss and metrics\n",
    "    model.compile(\n",
    "        optimizer=optimizer,\n",
    "        loss=motor_detection_loss,\n",
    "        metrics=[detection_accuracy, coordinate_error],\n",
    "        # Disable JIT compilation for loss function\n",
    "        jit_compile=False\n",
    "    )\n",
    "    \n",
    "    # Print model summary\n",
    "    model.summary()\n",
    "    \n",
    "    # Callbacks\n",
    "    callbacks = [\n",
    "        # Model checkpoint to save best model\n",
    "        tf.keras.callbacks.ModelCheckpoint(\n",
    "            model_path, \n",
    "            monitor='val_loss',\n",
    "            save_best_only=True,\n",
    "            verbose=1\n",
    "        ),\n",
    "        # Reduce LR on plateau\n",
    "        tf.keras.callbacks.ReduceLROnPlateau(\n",
    "            monitor='val_loss',\n",
    "            factor=0.5,\n",
    "            patience=3,\n",
    "            min_lr=1e-6,\n",
    "            verbose=1\n",
    "        ),\n",
    "        # Early stopping\n",
    "        tf.keras.callbacks.EarlyStopping(\n",
    "            monitor='val_loss',\n",
    "            patience=8,\n",
    "            restore_best_weights=True,\n",
    "            verbose=1\n",
    "        )\n",
    "    ]\n",
    "    \n",
    "    # Train the model\n",
    "    with Timer(\"Model training\"):\n",
    "        history = model.fit(\n",
    "            train_generator,\n",
    "            validation_data=val_generator,\n",
    "            epochs=epochs,\n",
    "            callbacks=callbacks,\n",
    "            verbose=1\n",
    "        )\n",
    "    \n",
    "    # Save final model if it's better than checkpoint\n",
    "    if not os.path.exists(model_path):\n",
    "        model.save(model_path)\n",
    "        print(f\"Final model saved to {model_path}\")\n",
    "    \n",
    "    return model, history"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6cc78ce",
   "metadata": {
    "papermill": {
     "duration": 0.003751,
     "end_time": "2025-04-28T00:51:18.159894",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.156143",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 8. inference and predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2c97a3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.168843Z",
     "iopub.status.busy": "2025-04-28T00:51:18.168665Z",
     "iopub.status.idle": "2025-04-28T00:51:18.190337Z",
     "shell.execute_reply": "2025-04-28T00:51:18.189621Z"
    },
    "papermill": {
     "duration": 0.027599,
     "end_time": "2025-04-28T00:51:18.191385",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.163786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 3D Non-Maximum Suppression\n",
    "def perform_3d_nms(detections, iou_threshold=NMS_IOU_THRESHOLD):\n",
    "    \"\"\"\n",
    "    Perform 3D Non-Maximum Suppression to merge nearby detections\n",
    "    \n",
    "    Args:\n",
    "        detections: List of dictionaries with keys 'z', 'y', 'x', 'confidence'\n",
    "        iou_threshold: Distance threshold for suppression\n",
    "        \n",
    "    Returns:\n",
    "        List of detections after NMS\n",
    "    \"\"\"\n",
    "    if not detections:\n",
    "        return []\n",
    "    \n",
    "    # Sort by confidence (highest first)\n",
    "    detections = sorted(detections, key=lambda x: x['confidence'], reverse=True)\n",
    "    \n",
    "    # List to store final detections after NMS\n",
    "    final_detections = []\n",
    "    \n",
    "    # Define 3D distance function\n",
    "    def distance_3d(d1, d2):\n",
    "        return np.sqrt((d1['z'] - d2['z'])**2 + \n",
    "                      (d1['y'] - d2['y'])**2 + \n",
    "                      (d1['x'] - d2['x'])**2)\n",
    "    \n",
    "    # Maximum distance threshold (based on box size)\n",
    "    box_size = 24  # Approximate motor size\n",
    "    distance_threshold = box_size * iou_threshold\n",
    "    \n",
    "    # Process each detection\n",
    "    while detections:\n",
    "        # Take the detection with highest confidence\n",
    "        best_detection = detections.pop(0)\n",
    "        final_detections.append(best_detection)\n",
    "        \n",
    "        # Filter out detections that are too close to the best detection\n",
    "        detections = [d for d in detections if distance_3d(d, best_detection) > distance_threshold]\n",
    "    \n",
    "    return final_detections\n",
    "\n",
    "# Progressive sampling for efficient inference\n",
    "def progressive_sampling_detection(tomo_id, model, initial_sampling=0.2, max_sampling=0.8):\n",
    "    \"\"\"\n",
    "    Progressive sampling strategy for efficient motor detection in large tomograms\n",
    "    \n",
    "    Args:\n",
    "        tomo_id: Tomogram ID to process\n",
    "        model: Trained detection model\n",
    "        initial_sampling: Initial sampling ratio for coarse scan\n",
    "        max_sampling: Maximum sampling ratio for fine-grained scan\n",
    "        \n",
    "    Returns:\n",
    "        Dictionary with detection results\n",
    "    \"\"\"\n",
    "    print(f\"Processing tomogram {tomo_id} with progressive sampling\")\n",
    "    \n",
    "    # Get all slice files for this tomogram\n",
    "    tomo_dir = os.path.join(TEST_PATH, tomo_id)\n",
    "    all_slices = sorted([f for f in os.listdir(tomo_dir) if f.endswith('.jpg')])\n",
    "    total_slices = len(all_slices)\n",
    "    \n",
    "    print(f\"Found {total_slices} total slices for tomogram {tomo_id}\")\n",
    "    \n",
    "    # STAGE 1: Initial coarse sampling\n",
    "    coarse_count = int(total_slices * initial_sampling)\n",
    "    print(f\"STAGE 1: Performing coarse sampling with {coarse_count} slices ({initial_sampling*100:.1f}%)\")\n",
    "    \n",
    "    # Sample evenly spaced slices for initial scan\n",
    "    coarse_indices = np.linspace(0, total_slices-1, coarse_count, dtype=int)\n",
    "    coarse_slices = [all_slices[i] for i in coarse_indices]\n",
    "    \n",
    "    # In the progressive_sampling_detection function:\n",
    "    coarse_generator = TomogramDataGenerator(\n",
    "        tomo_ids=[tomo_id],\n",
    "        batch_size=1,\n",
    "        slice_sampling_factor=initial_sampling,\n",
    "        max_slices=150,  # Match training value (150)\n",
    "        resize=IMAGE_SIZE,\n",
    "        is_test=True\n",
    "    )\n",
    "    \n",
    "    # Run inference on coarse scan\n",
    "    with Timer(\"Coarse inference\"):\n",
    "        x_batch, _ = coarse_generator[0]\n",
    "        coarse_predictions = model.predict(x_batch, verbose=0)\n",
    "    \n",
    "    # Process coarse predictions\n",
    "    coarse_detections = []\n",
    "    \n",
    "    # Reshape predictions if needed\n",
    "    coarse_predictions = np.reshape(coarse_predictions, (-1, 4))\n",
    "    \n",
    "    # Extract confidence from first element\n",
    "    confidence = coarse_predictions[0, 0]\n",
    "    \n",
    "    if confidence >= CONFIDENCE_THRESHOLD:\n",
    "        # Get coordinates (normalized)\n",
    "        z_norm, y_norm, x_norm = coarse_predictions[0, 1:4]\n",
    "        \n",
    "        # Convert to original coordinates\n",
    "        z = z_norm * total_slices\n",
    "        \n",
    "        # Get the original dimensions from the first slice\n",
    "        sample_path = os.path.join(tomo_dir, all_slices[0])\n",
    "        with Image.open(sample_path) as img:\n",
    "            width, height = img.size\n",
    "        \n",
    "        y = y_norm * height\n",
    "        x = x_norm * width\n",
    "        \n",
    "        # Store detection\n",
    "        coarse_detections.append({\n",
    "            'z': z,\n",
    "            'y': y,\n",
    "            'x': x,\n",
    "            'confidence': float(confidence)\n",
    "        })\n",
    "    \n",
    "    # STAGE 2: Fine-grained sampling if needed\n",
    "    fine_detections = []\n",
    "    if coarse_detections:\n",
    "        print(f\"STAGE 2: Found {len(coarse_detections)} potential detections in coarse scan\")\n",
    "        \n",
    "        # Define region of interest around the detection\n",
    "        z_mean = coarse_detections[0]['z']\n",
    "        z_window = total_slices * 0.2  # 20% of total slices as window\n",
    "        \n",
    "        # Define region bounds\n",
    "        z_min = max(0, int(z_mean - z_window/2))\n",
    "        z_max = min(total_slices, int(z_mean + z_window/2))\n",
    "        \n",
    "        # Calculate how many additional slices to sample\n",
    "        additional_count = int(total_slices * max_sampling) - coarse_count\n",
    "        \n",
    "        if additional_count > 0:\n",
    "            # Sample more densely in the region of interest\n",
    "            region_size = z_max - z_min\n",
    "            fine_indices = np.linspace(z_min, z_max, min(additional_count, region_size), dtype=int)\n",
    "            \n",
    "            # Filter out already processed indices\n",
    "            fine_indices = [i for i in fine_indices if i not in coarse_indices]\n",
    "            fine_slices = [all_slices[i] for i in fine_indices]\n",
    "            \n",
    "            print(f\"Sampling {len(fine_slices)} additional slices in region of interest\")\n",
    "            \n",
    "            # Process each fine slice individually\n",
    "            for i, slice_file in enumerate(fine_slices):\n",
    "                slice_path = os.path.join(tomo_dir, slice_file)\n",
    "                slice_z = int(slice_file.split('_')[1].split('.')[0])\n",
    "                \n",
    "                # Load and preprocess the slice\n",
    "                with Image.open(slice_path) as img:\n",
    "                    if IMAGE_SIZE:\n",
    "                        img = img.resize(IMAGE_SIZE, Image.BICUBIC)\n",
    "                    img_array = np.array(img.convert('L'), dtype=np.float32)\n",
    "                    img_array = enhance_slice(img_array.astype(np.uint8)).astype(np.float32)\n",
    "                    img_array = img_array / 255.0  # Normalize to [0,1]\n",
    "                \n",
    "                # Add batch and channel dimensions\n",
    "                img_tensor = np.expand_dims(np.expand_dims(img_array, axis=0), axis=-1)\n",
    "                \n",
    "                # Create mini-volume for processing\n",
    "                mini_volume = np.zeros((1, 150, IMAGE_SIZE[0], IMAGE_SIZE[1], 1), dtype=np.float32)\n",
    "                # Fill all 150 slices with the same image\n",
    "                for j in range(150):\n",
    "                    mini_volume[0, j, :, :, 0] = img_tensor[0, :, :, 0]\n",
    "                \n",
    "                # Run inference\n",
    "                prediction = model.predict(mini_volume, verbose=0)\n",
    "                prediction = np.reshape(prediction, (-1, 4))\n",
    "                \n",
    "                # Check confidence\n",
    "                confidence = prediction[0, 0]\n",
    "                if confidence >= CONFIDENCE_THRESHOLD * 0.8:  # Lower threshold for fine-grained scan\n",
    "                    # Get normalized coordinates\n",
    "                    _, y_norm, x_norm = prediction[0, 1:4]\n",
    "                    \n",
    "                    # Convert to original coordinates\n",
    "                    y = y_norm * height\n",
    "                    x = x_norm * width\n",
    "                    \n",
    "                    # Store detection with actual slice number\n",
    "                    fine_detections.append({\n",
    "                        'z': slice_z,\n",
    "                        'y': y,\n",
    "                        'x': x,\n",
    "                        'confidence': float(confidence)\n",
    "                    })\n",
    "    else:\n",
    "        print(\"No potential detections found in coarse scan, trying wider search\")\n",
    "        \n",
    "        # If no detections in coarse scan, try sampling more slices\n",
    "        medium_sampling = (initial_sampling + max_sampling) / 2\n",
    "        medium_count = int(total_slices * medium_sampling) - coarse_count\n",
    "        \n",
    "        if medium_count > 0:\n",
    "            # Sample additional slices uniformly\n",
    "            all_indices = set(range(total_slices))\n",
    "            available_indices = list(all_indices - set(coarse_indices))\n",
    "            \n",
    "            # Sort available indices to ensure deterministic behavior\n",
    "            available_indices.sort()\n",
    "            \n",
    "            # Sample systematically\n",
    "            if len(available_indices) > medium_count:\n",
    "                step = len(available_indices) // medium_count\n",
    "                medium_indices = available_indices[::step][:medium_count]\n",
    "            else:\n",
    "                medium_indices = available_indices\n",
    "            \n",
    "            medium_slices = [all_slices[i] for i in medium_indices]\n",
    "            print(f\"Trying {len(medium_slices)} additional slices in medium-resolution scan\")\n",
    "            \n",
    "            # Batch process medium slices\n",
    "            for i in range(0, len(medium_slices), 16):\n",
    "                batch_slices = medium_slices[i:i+16]\n",
    "                batch_paths = [os.path.join(tomo_dir, s) for s in batch_slices]\n",
    "                batch_z = [int(s.split('_')[1].split('.')[0]) for s in batch_slices]\n",
    "                \n",
    "                # Load and preprocess batch\n",
    "                batch_data = []\n",
    "                for path in batch_paths:\n",
    "                    with Image.open(path) as img:\n",
    "                        if IMAGE_SIZE:\n",
    "                            img = img.resize(IMAGE_SIZE, Image.BICUBIC)\n",
    "                        img_array = np.array(img.convert('L'), dtype=np.float32)\n",
    "                        img_array = enhance_slice(img_array.astype(np.uint8)).astype(np.float32)\n",
    "                        img_array = img_array / 255.0  # Normalize to [0,1]\n",
    "                        batch_data.append(img_array)\n",
    "                \n",
    "                # Create mini-volume for batch\n",
    "                batch_length = len(batch_data)\n",
    "                if batch_length < 16:  # Pad if needed\n",
    "                    padding = [batch_data[-1]] * (16 - batch_length)\n",
    "                    batch_data.extend(padding)\n",
    "                \n",
    "                # Create mini-volume properly sized for model\n",
    "                mini_volume = np.zeros((1, 150, IMAGE_SIZE[0], IMAGE_SIZE[1], 1), dtype=np.float32)\n",
    "                \n",
    "                # Choose one representative slice (first one)\n",
    "                reference_slice = batch_data[0]\n",
    "                \n",
    "                # Fill all 150 slices with this reference image\n",
    "                for j in range(150):\n",
    "                    mini_volume[0, j, :, :, 0] = reference_slice\n",
    "                \n",
    "                # Run inference\n",
    "                prediction = model.predict(mini_volume, verbose=0)\n",
    "                prediction = np.reshape(prediction, (-1, 4))\n",
    "                \n",
    "                # Check confidence\n",
    "                confidence = prediction[0, 0]\n",
    "                if confidence >= CONFIDENCE_THRESHOLD * 0.9:  # Even lower threshold for wide scan\n",
    "                    # Get normalized coordinates\n",
    "                    _, y_norm, x_norm = prediction[0, 1:4]\n",
    "                    \n",
    "                    # Convert to original coordinates\n",
    "                    y = y_norm * height\n",
    "                    x = x_norm * width\n",
    "                    \n",
    "                    # Use middle slice as z-coordinate (approximation)\n",
    "                    z_idx = len(batch_z) // 2\n",
    "                    z = batch_z[z_idx] if z_idx < len(batch_z) else batch_z[-1]\n",
    "                    \n",
    "                    # Store detection\n",
    "                    fine_detections.append({\n",
    "                        'z': z,\n",
    "                        'y': y,\n",
    "                        'x': x,\n",
    "                        'confidence': float(confidence)\n",
    "                    })\n",
    "    \n",
    "    # Combine all detections\n",
    "    all_detections = coarse_detections + fine_detections\n",
    "    print(f\"Total detections before NMS: {len(all_detections)}\")\n",
    "    \n",
    "    # Apply 3D NMS\n",
    "    final_detections = perform_3d_nms(all_detections, NMS_IOU_THRESHOLD)\n",
    "    print(f\"Detections after NMS: {len(final_detections)}\")\n",
    "    \n",
    "    # Sort by confidence\n",
    "    final_detections.sort(key=lambda x: x['confidence'], reverse=True)\n",
    "    \n",
    "    # Return coordinates of highest confidence detection, or -1 if none found\n",
    "    if not final_detections:\n",
    "        print(f\"No motor detected in {tomo_id}\")\n",
    "        return {\n",
    "            'tomo_id': tomo_id,\n",
    "            'Motor axis 0': -1,\n",
    "            'Motor axis 1': -1,\n",
    "            'Motor axis 2': -1\n",
    "        }\n",
    "    \n",
    "    # Get best detection\n",
    "    best_detection = final_detections[0]\n",
    "    print(f\"Motor found in {tomo_id} at position: z={best_detection['z']:.1f}, y={best_detection['y']:.1f}, x={best_detection['x']:.1f} with confidence {best_detection['confidence']:.3f}\")\n",
    "    \n",
    "    return {\n",
    "        'tomo_id': tomo_id,\n",
    "        'Motor axis 0': round(best_detection['z']),\n",
    "        'Motor axis 1': round(best_detection['y']),\n",
    "        'Motor axis 2': round(best_detection['x'])\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c0ce189",
   "metadata": {
    "papermill": {
     "duration": 0.003755,
     "end_time": "2025-04-28T00:51:18.198917",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.195162",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 9. Generate submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "975537d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.207847Z",
     "iopub.status.busy": "2025-04-28T00:51:18.207642Z",
     "iopub.status.idle": "2025-04-28T00:51:18.217333Z",
     "shell.execute_reply": "2025-04-28T00:51:18.216655Z"
    },
    "papermill": {
     "duration": 0.015338,
     "end_time": "2025-04-28T00:51:18.218351",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.203013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_submission():\n",
    "    \"\"\"Generate submission file using trained model and progressive sampling\"\"\"\n",
    "    # Get list of test tomograms\n",
    "    test_tomos = sorted([d for d in os.listdir(TEST_PATH) if os.path.isdir(os.path.join(TEST_PATH, d))])\n",
    "    total_tomos = len(test_tomos)\n",
    "    \n",
    "    print(f\"Found {total_tomos} tomograms in test directory\")\n",
    "    \n",
    "    # Load model\n",
    "    model = None\n",
    "    model_path = '/kaggle/working/best_motor_model.keras'\n",
    "    \n",
    "    if os.path.exists(model_path):\n",
    "        print(f\"Loading model from {model_path}\")\n",
    "        model = tf.keras.models.load_model(\n",
    "            model_path,\n",
    "            custom_objects={\n",
    "                'motor_detection_loss': motor_detection_loss,\n",
    "                'detection_accuracy': detection_accuracy,\n",
    "                'coordinate_error': coordinate_error\n",
    "            }\n",
    "        )\n",
    "    else:\n",
    "        print(\"Model not found, please train the model first\")\n",
    "        return None\n",
    "    \n",
    "    # Process tomograms with ThreadPoolExecutor for parallelization\n",
    "    results = []\n",
    "    motors_found = 0\n",
    "    \n",
    "    # Process each tomogram\n",
    "    for i, tomo_id in enumerate(test_tomos, 1):\n",
    "        print(f\"\\nProcessing tomogram {i}/{total_tomos}: {tomo_id}\")\n",
    "        \n",
    "        try:\n",
    "            # Clear memory before processing\n",
    "            clear_memory()\n",
    "            \n",
    "            # Process tomogram with progressive sampling\n",
    "            result = progressive_sampling_detection(tomo_id, model)\n",
    "            results.append(result)\n",
    "            \n",
    "            # Update motors found count\n",
    "            has_motor = result['Motor axis 0'] >= 0\n",
    "            if has_motor:\n",
    "                motors_found += 1\n",
    "                print(f\"Motor found in {tomo_id} at position: \"\n",
    "                      f\"z={result['Motor axis 0']}, y={result['Motor axis 1']}, x={result['Motor axis 2']}\")\n",
    "            else:\n",
    "                print(f\"No motor detected in {tomo_id}\")\n",
    "                \n",
    "            print(f\"Current detection rate: {motors_found}/{i} ({motors_found/i*100:.1f}%)\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"Error processing {tomo_id}: {e}\")\n",
    "            # Create a default entry for failed tomograms\n",
    "            results.append({\n",
    "                'tomo_id': tomo_id,\n",
    "                'Motor axis 0': -1,\n",
    "                'Motor axis 1': -1,\n",
    "                'Motor axis 2': -1\n",
    "            })\n",
    "    \n",
    "    # Create submission dataframe\n",
    "    submission_df = pd.DataFrame(results)\n",
    "    \n",
    "    # Ensure proper column order\n",
    "    submission_df = submission_df[['tomo_id', 'Motor axis 0', 'Motor axis 1', 'Motor axis 2']]\n",
    "    \n",
    "    # Save the submission file\n",
    "    submission_df.to_csv(SUBMISSION_PATH, index=False)\n",
    "    \n",
    "    print(f\"\\nSubmission complete!\")\n",
    "    print(f\"Motors detected: {motors_found}/{total_tomos} ({motors_found/total_tomos*100:.1f}%)\")\n",
    "    print(f\"Submission saved to: {SUBMISSION_PATH}\")\n",
    "    \n",
    "    # Display first few rows of submission\n",
    "    print(\"\\nSubmission preview:\")\n",
    "    print(submission_df.head())\n",
    "    \n",
    "    return submission_df\n",
    "\n",
    "# Plot training history\n",
    "def plot_training_history(history):\n",
    "    \"\"\"Plot training and validation metrics\"\"\"\n",
    "    plt.figure(figsize=(15, 5))\n",
    "    \n",
    "    # Plot loss\n",
    "    plt.subplot(1, 3, 1)\n",
    "    plt.plot(history.history['loss'], label='Train Loss')\n",
    "    plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    \n",
    "    # Plot detection accuracy\n",
    "    plt.subplot(1, 3, 2)\n",
    "    plt.plot(history.history['detection_accuracy'], label='Train Accuracy')\n",
    "    plt.plot(history.history['val_detection_accuracy'], label='Val Accuracy')\n",
    "    plt.title('Detection Accuracy')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.legend()\n",
    "    \n",
    "    # Plot coordinate error\n",
    "    plt.subplot(1, 3, 3)\n",
    "    plt.plot(history.history['coordinate_error'], label='Train Coord Error')\n",
    "    plt.plot(history.history['val_coordinate_error'], label='Val Coord Error')\n",
    "    plt.title('Coordinate Error')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Error')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig('training_history.png')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2914e5b3",
   "metadata": {
    "papermill": {
     "duration": 0.003684,
     "end_time": "2025-04-28T00:51:18.225779",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.222095",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 10. optional visulatiztion function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3ab9847e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.234346Z",
     "iopub.status.busy": "2025-04-28T00:51:18.234116Z",
     "iopub.status.idle": "2025-04-28T00:51:18.240379Z",
     "shell.execute_reply": "2025-04-28T00:51:18.239722Z"
    },
    "papermill": {
     "duration": 0.011799,
     "end_time": "2025-04-28T00:51:18.241490",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.229691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visualize_detections(tomo_id, detection_result):\n",
    "    \"\"\"Visualize detection result for a tomogram\"\"\"\n",
    "    # Skip if no motor detected\n",
    "    if detection_result['Motor axis 0'] < 0:\n",
    "        print(f\"No motor detected in {tomo_id}\")\n",
    "        return\n",
    "    \n",
    "    # Get tomogram folder\n",
    "    tomo_dir = os.path.join(TEST_PATH, tomo_id)\n",
    "    \n",
    "    # Get detected motor coordinates\n",
    "    z = detection_result['Motor axis 0']\n",
    "    y = detection_result['Motor axis 1']\n",
    "    x = detection_result['Motor axis 2']\n",
    "    \n",
    "    # Get all slice files\n",
    "    slice_files = sorted([f for f in os.listdir(tomo_dir) if f.endswith('.jpg')])\n",
    "    \n",
    "    # Find the slice corresponding to the z-coordinate\n",
    "    if 0 <= z < len(slice_files):\n",
    "        slice_file = slice_files[z]\n",
    "        slice_path = os.path.join(tomo_dir, slice_file)\n",
    "        \n",
    "        # Load the slice\n",
    "        img = np.array(Image.open(slice_path))\n",
    "        \n",
    "        # Create figure\n",
    "        plt.figure(figsize=(12, 10))\n",
    "        \n",
    "        # Show the slice\n",
    "        plt.imshow(img, cmap='gray')\n",
    "        \n",
    "        # Mark the detected position\n",
    "        plt.plot(x, y, 'ro', markersize=10)\n",
    "        \n",
    "        # Add a bounding box around the motor\n",
    "        box_size = 24\n",
    "        rect = plt.Rectangle((x - box_size//2, y - box_size//2), box_size, box_size,\n",
    "                             linewidth=2, edgecolor='r', facecolor='none')\n",
    "        plt.gca().add_patch(rect)\n",
    "        \n",
    "        # Add annotation\n",
    "        plt.annotate(f\"Motor\", (x + box_size//2 + 5, y),\n",
    "                    color='red', fontsize=12)\n",
    "        \n",
    "        plt.title(f\"Motor detected in {tomo_id} at position: z={z}, y={y}, x={x}\")\n",
    "        \n",
    "        # Save the visualization\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(f\"{tomo_id}_detection.png\")\n",
    "        plt.show()\n",
    "    else:\n",
    "        print(f\"Invalid z-coordinate {z} for tomogram {tomo_id}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12256e1c",
   "metadata": {
    "papermill": {
     "duration": 0.003582,
     "end_time": "2025-04-28T00:51:18.249028",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.245446",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8597e731",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.257570Z",
     "iopub.status.busy": "2025-04-28T00:51:18.257391Z",
     "iopub.status.idle": "2025-04-28T00:51:18.263719Z",
     "shell.execute_reply": "2025-04-28T00:51:18.263196Z"
    },
    "papermill": {
     "duration": 0.011868,
     "end_time": "2025-04-28T00:51:18.264680",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.252812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_pipeline():\n",
    "    \"\"\"Run the full motor detection pipeline\"\"\"\n",
    "    start_time = time.time()\n",
    "    print(\"Starting BYU Flagellar Motor Detection Pipeline\")\n",
    "    \n",
    "    # Set up GPU and get batch size\n",
    "    batch_size, has_gpu = optimize_gpu()\n",
    "    \n",
    "    # Load training labels\n",
    "    train_labels_df = pd.read_csv(TRAIN_LABELS)\n",
    "    print(f\"Loaded {len(train_labels_df)} training labels\")\n",
    "    \n",
    "    # Split data into train and validation sets\n",
    "    train_ids, val_ids = create_train_val_split(train_labels_df, val_fraction=0.2)\n",
    "    print(f\"Training on {len(train_ids)} tomograms, validating on {len(val_ids)} tomograms\")\n",
    "    \n",
    "    # Create data generators\n",
    "    train_generator = TomogramDataGenerator(\n",
    "        tomo_ids=train_ids,\n",
    "        labels_df=train_labels_df,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=True,\n",
    "        slice_sampling_factor=0.5,\n",
    "        max_slices=150,\n",
    "        resize=IMAGE_SIZE,\n",
    "        augment=True\n",
    "    )\n",
    "    \n",
    "    val_generator = TomogramDataGenerator(\n",
    "        tomo_ids=val_ids,\n",
    "        labels_df=train_labels_df,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        slice_sampling_factor=0.5,\n",
    "        max_slices=150,\n",
    "        resize=IMAGE_SIZE,\n",
    "        augment=False\n",
    "    )\n",
    "    \n",
    "    # Get input shape from generator\n",
    "    with Timer(\"Loading sample batch\"):\n",
    "        sample_batch, _ = train_generator[0]\n",
    "    \n",
    "    input_shape = sample_batch.shape[1:]\n",
    "    print(f\"Model input shape: {input_shape}\")\n",
    "    \n",
    "    # Check if model exists\n",
    "    model_path = '/kaggle/working/best_motor_model.keras'\n",
    "    \n",
    "    if os.path.exists(model_path):\n",
    "        print(f\"Loading existing model from {model_path}\")\n",
    "        model = tf.keras.models.load_model(\n",
    "            model_path,\n",
    "            custom_objects={\n",
    "                'motor_detection_loss': motor_detection_loss,\n",
    "                'detection_accuracy': detection_accuracy,\n",
    "                'coordinate_error': coordinate_error\n",
    "            }\n",
    "        )\n",
    "    else:\n",
    "        print(\"Training new model\")\n",
    "        \n",
    "        # Train model\n",
    "        model, history = train_model(\n",
    "            train_generator,\n",
    "            val_generator,\n",
    "            input_shape,\n",
    "            epochs=15,\n",
    "            learning_rate=0.001,\n",
    "            model_path=model_path\n",
    "        )\n",
    "        \n",
    "        #Plot Training\n",
    "        plot_training_history(history)\n",
    "    \n",
    "    # Clear memory before inference\n",
    "    clear_memory()\n",
    "    \n",
    "    # Generate submission\n",
    "    print(\"\\nGenerating submission\")\n",
    "    submission_df = generate_submission()\n",
    "    \n",
    "    # Print total execution time\n",
    "    elapsed = time.time() - start_time\n",
    "    print(f\"\\nTotal execution time: {elapsed:.2f} seconds ({elapsed/60:.2f} minutes)\")\n",
    "    \n",
    "    return submission_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c4f4a91",
   "metadata": {
    "papermill": {
     "duration": 0.003658,
     "end_time": "2025-04-28T00:51:18.272207",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.268549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Run scripts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7f4e8e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T00:51:18.280782Z",
     "iopub.status.busy": "2025-04-28T00:51:18.280381Z",
     "iopub.status.idle": "2025-04-28T10:56:33.606008Z",
     "shell.execute_reply": "2025-04-28T10:56:33.605136Z"
    },
    "papermill": {
     "duration": 36315.331469,
     "end_time": "2025-04-28T10:56:33.607502",
     "exception": false,
     "start_time": "2025-04-28T00:51:18.276033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting BYU Flagellar Motor Detection Pipeline\n",
      "Found 2 GPU(s)\n",
      "Memory growth enabled for PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')\n",
      "Memory growth enabled for PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')\n",
      "Using explicit type casting for mixed precision operations\n",
      "XLA JIT compilation enabled\n",
      "Loaded 737 training labels\n",
      "Training on 518 tomograms, validating on 130 tomograms\n",
      "[TIMER] Loading sample batch: 24.479s\n",
      "Model input shape: (150, 224, 224, 1)\n",
      "Training new model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1745801504.285842      20 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1745801504.286478      20 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/activations/leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">75</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)    │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">75</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">13,856</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">75</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">75</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)    │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">55,360</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv3D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">221,312</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)     │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling3D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling3d             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling3D</span>)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">16,512</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d (\u001b[38;5;33mConv3D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m16\u001b[0m)   │             \u001b[38;5;34m448\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m16\u001b[0m)   │              \u001b[38;5;34m64\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu (\u001b[38;5;33mLeakyReLU\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m16\u001b[0m)   │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d (\u001b[38;5;33mMaxPooling3D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m75\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m16\u001b[0m)    │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_1 (\u001b[38;5;33mConv3D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m75\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │          \u001b[38;5;34m13,856\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m75\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │             \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_1 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m75\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m32\u001b[0m)    │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_1 (\u001b[38;5;33mMaxPooling3D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m32\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_2 (\u001b[38;5;33mConv3D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │          \u001b[38;5;34m55,360\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_2                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │             \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_2 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_2 (\u001b[38;5;33mMaxPooling3D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m64\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv3d_3 (\u001b[38;5;33mConv3D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m128\u001b[0m)     │         \u001b[38;5;34m221,312\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_3                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m128\u001b[0m)     │             \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_3 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m128\u001b[0m)     │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling3d_3 (\u001b[38;5;33mMaxPooling3D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling3d             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling3D\u001b[0m)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m16,512\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ leaky_re_lu_4 (\u001b[38;5;33mLeakyReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │             \u001b[38;5;34m516\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">308,964</span> (1.18 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m308,964\u001b[0m (1.18 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">308,484</span> (1.18 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m308,484\u001b[0m (1.18 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">480</span> (1.88 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m480\u001b[0m (1.88 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1745801552.913021      66 service.cc:148] XLA service 0x7efd2c003ae0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1745801552.913719      66 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1745801552.913739      66 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1745801552.941697      66 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "I0000 00:00:1745801553.021870      66 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n",
      "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n",
      "E0000 00:00:1745801766.178148      67 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1745801766.487580      67 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "2025-04-28 00:56:08.944821: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[6,32,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}, f32[32]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:09.669973: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.725240729s\n",
      "Trying algorithm eng0{} for conv (f32[6,32,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}, f32[32]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:16.265829: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[6,16,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,32,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardInput\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:16.916906: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.651161755s\n",
      "Trying algorithm eng0{} for conv (f32[6,16,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,32,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardInput\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:18.459860: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:20.024675: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 2.564904195s\n",
      "Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:21.024894: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=5,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:23.884701: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.859912138s\n",
      "Trying algorithm eng20{k2=5,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:24.884912: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=8,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:27.969774: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 4.084954032s\n",
      "Trying algorithm eng20{k2=8,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:28.969966: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:29.398604: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.428719276s\n",
      "Trying algorithm eng0{} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,1,150,224,224]{4,3,2,1,0}, f32[6,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:33.368307: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=1,k3=0} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[6,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:33.823982: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.455763847s\n",
      "Trying algorithm eng20{k2=1,k3=0} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[6,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:34.824183: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[6,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 00:56:41.613998: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 7.789915403s\n",
      "Trying algorithm eng0{} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[6,16,75,112,112]{4,3,2,1,0}, f32[6,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23s/step - coordinate_error: 0.4895 - detection_accuracy: 0.6542 - loss: 8.3736 \n",
      "Epoch 1: val_loss improved from inf to 8.38780, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2818s\u001b[0m 30s/step - coordinate_error: 0.4900 - detection_accuracy: 0.6545 - loss: 8.3517 - val_coordinate_error: 0.4231 - val_detection_accuracy: 0.5341 - val_loss: 8.3878 - learning_rate: 0.0010\n",
      "Epoch 2/15\n",
      "\u001b[1m38/87\u001b[0m \u001b[32m━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━\u001b[0m \u001b[1m17:45\u001b[0m 22s/step - coordinate_error: 0.5775 - detection_accuracy: 0.6509 - loss: 6.3149"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E0000 00:00:1745805365.209388      66 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1745805365.423876      66 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "2025-04-28 01:56:12.016755: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:13.568162: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 2.551492898s\n",
      "Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:14.568337: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=5,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:17.420551: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.852269579s\n",
      "Trying algorithm eng20{k2=5,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:18.420770: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=8,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:21.509850: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 4.089181492s\n",
      "Trying algorithm eng20{k2=8,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,150,224,224]{4,3,2,1,0}, f32[2,16,150,224,224]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:25.707313: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,75,112,112]{4,3,2,1,0}, f32[2,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 01:56:29.361900: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 4.654622684s\n",
      "Trying algorithm eng0{} for conv (f32[32,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,75,112,112]{4,3,2,1,0}, f32[2,32,75,112,112]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBackwardFilter\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21s/step - coordinate_error: 0.5127 - detection_accuracy: 0.6641 - loss: 5.3592 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E0000 00:00:1745806876.157583      66 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1745806876.431626      66 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "2025-04-28 02:21:18.690646: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[4,32,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}, f32[32]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n",
      "2025-04-28 02:21:19.032270: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.341718792s\n",
      "Trying algorithm eng0{} for conv (f32[4,32,75,112,112]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,75,112,112]{4,3,2,1,0}, f32[32,16,3,3,3]{4,3,2,1,0}, f32[32]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 2: val_loss did not improve from 8.38780\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2513s\u001b[0m 27s/step - coordinate_error: 0.5121 - detection_accuracy: 0.6644 - loss: 5.3475 - val_coordinate_error: 0.5256 - val_detection_accuracy: 0.5341 - val_loss: 8.8646 - learning_rate: 0.0010\n",
      "Epoch 3/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3988 - detection_accuracy: 0.6634 - loss: 2.4793 \n",
      "Epoch 3: val_loss improved from 8.38780 to 8.38159, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2354s\u001b[0m 25s/step - coordinate_error: 0.3986 - detection_accuracy: 0.6629 - loss: 2.4728 - val_coordinate_error: 0.4284 - val_detection_accuracy: 0.5341 - val_loss: 8.3816 - learning_rate: 0.0010\n",
      "Epoch 4/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3436 - detection_accuracy: 0.6588 - loss: 1.4052 \n",
      "Epoch 4: val_loss improved from 8.38159 to 8.04624, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2306s\u001b[0m 25s/step - coordinate_error: 0.3436 - detection_accuracy: 0.6589 - loss: 1.4056 - val_coordinate_error: 0.3502 - val_detection_accuracy: 0.5341 - val_loss: 8.0462 - learning_rate: 0.0010\n",
      "Epoch 5/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19s/step - coordinate_error: 0.3268 - detection_accuracy: 0.6660 - loss: 1.3144 \n",
      "Epoch 5: val_loss improved from 8.04624 to 5.32722, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2269s\u001b[0m 24s/step - coordinate_error: 0.3269 - detection_accuracy: 0.6662 - loss: 1.3144 - val_coordinate_error: 0.3399 - val_detection_accuracy: 0.5341 - val_loss: 5.3272 - learning_rate: 0.0010\n",
      "Epoch 6/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26s/step - coordinate_error: 0.3139 - detection_accuracy: 0.6482 - loss: 1.3540 \n",
      "Epoch 6: val_loss improved from 5.32722 to 1.42060, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2968s\u001b[0m 33s/step - coordinate_error: 0.3141 - detection_accuracy: 0.6484 - loss: 1.3537 - val_coordinate_error: 0.3325 - val_detection_accuracy: 0.5985 - val_loss: 1.4206 - learning_rate: 0.0010\n",
      "Epoch 7/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3422 - detection_accuracy: 0.6969 - loss: 1.3432 \n",
      "Epoch 7: val_loss improved from 1.42060 to 1.35438, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2326s\u001b[0m 25s/step - coordinate_error: 0.3422 - detection_accuracy: 0.6967 - loss: 1.3429 - val_coordinate_error: 0.3372 - val_detection_accuracy: 0.6742 - val_loss: 1.3544 - learning_rate: 0.0010\n",
      "Epoch 8/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3484 - detection_accuracy: 0.7197 - loss: 1.3183 \n",
      "Epoch 8: val_loss improved from 1.35438 to 1.18344, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2388s\u001b[0m 26s/step - coordinate_error: 0.3484 - detection_accuracy: 0.7198 - loss: 1.3188 - val_coordinate_error: 0.3074 - val_detection_accuracy: 0.7462 - val_loss: 1.1834 - learning_rate: 0.0010\n",
      "Epoch 9/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3165 - detection_accuracy: 0.7343 - loss: 1.1821 \n",
      "Epoch 9: val_loss did not improve from 1.18344\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2412s\u001b[0m 26s/step - coordinate_error: 0.3166 - detection_accuracy: 0.7342 - loss: 1.1831 - val_coordinate_error: 0.3070 - val_detection_accuracy: 0.7803 - val_loss: 1.1888 - learning_rate: 0.0010\n",
      "Epoch 10/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21s/step - coordinate_error: 0.3319 - detection_accuracy: 0.7376 - loss: 1.1978 \n",
      "Epoch 10: val_loss did not improve from 1.18344\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2428s\u001b[0m 26s/step - coordinate_error: 0.3319 - detection_accuracy: 0.7373 - loss: 1.1983 - val_coordinate_error: 0.3381 - val_detection_accuracy: 0.5341 - val_loss: 8.0343 - learning_rate: 0.0010\n",
      "Epoch 11/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19s/step - coordinate_error: 0.3313 - detection_accuracy: 0.6364 - loss: 1.3219 \n",
      "Epoch 11: val_loss did not improve from 1.18344\n",
      "\n",
      "Epoch 11: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2290s\u001b[0m 25s/step - coordinate_error: 0.3315 - detection_accuracy: 0.6371 - loss: 1.3221 - val_coordinate_error: 0.3380 - val_detection_accuracy: 0.5720 - val_loss: 1.9309 - learning_rate: 0.0010\n",
      "Epoch 12/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19s/step - coordinate_error: 0.3253 - detection_accuracy: 0.7324 - loss: 1.1861 \n",
      "Epoch 12: val_loss did not improve from 1.18344\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2266s\u001b[0m 24s/step - coordinate_error: 0.3253 - detection_accuracy: 0.7324 - loss: 1.1862 - val_coordinate_error: 0.3548 - val_detection_accuracy: 0.6136 - val_loss: 3.1966 - learning_rate: 5.0000e-04\n",
      "Epoch 13/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19s/step - coordinate_error: 0.3357 - detection_accuracy: 0.7038 - loss: 1.3083 \n",
      "Epoch 13: val_loss improved from 1.18344 to 1.17208, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2266s\u001b[0m 24s/step - coordinate_error: 0.3357 - detection_accuracy: 0.7036 - loss: 1.3077 - val_coordinate_error: 0.3299 - val_detection_accuracy: 0.7841 - val_loss: 1.1721 - learning_rate: 5.0000e-04\n",
      "Epoch 14/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19s/step - coordinate_error: 0.3327 - detection_accuracy: 0.6941 - loss: 1.2746 \n",
      "Epoch 14: val_loss improved from 1.17208 to 1.16098, saving model to /kaggle/working/best_motor_model.keras\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2260s\u001b[0m 24s/step - coordinate_error: 0.3326 - detection_accuracy: 0.6943 - loss: 1.2740 - val_coordinate_error: 0.3281 - val_detection_accuracy: 0.7614 - val_loss: 1.1610 - learning_rate: 5.0000e-04\n",
      "Epoch 15/15\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20s/step - coordinate_error: 0.3254 - detection_accuracy: 0.7049 - loss: 1.2404 \n",
      "Epoch 15: val_loss did not improve from 1.16098\n",
      "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2321s\u001b[0m 25s/step - coordinate_error: 0.3254 - detection_accuracy: 0.7047 - loss: 1.2409 - val_coordinate_error: 0.3129 - val_detection_accuracy: 0.7765 - val_loss: 1.2071 - learning_rate: 5.0000e-04\n",
      "Restoring model weights from the end of the best epoch: 14.\n",
      "[TIMER] Model training: 36230.755s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Generating submission\n",
      "Found 3 tomograms in test directory\n",
      "Loading model from /kaggle/working/best_motor_model.keras\n",
      "\n",
      "Processing tomogram 1/3: tomo_003acc\n",
      "Processing tomogram tomo_003acc with progressive sampling\n",
      "Found 500 total slices for tomogram tomo_003acc\n",
      "STAGE 1: Performing coarse sampling with 100 slices (20.0%)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E0000 00:00:1745837747.901755      67 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1745837748.091319      67 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[TIMER] Coarse inference: 11.458s\n",
      "STAGE 2: Found 1 potential detections in coarse scan\n",
      "Sampling 80 additional slices in region of interest\n",
      "Total detections before NMS: 81\n",
      "Detections after NMS: 73\n",
      "Motor found in tomo_003acc at position: z=217.0, y=1195.8, x=1070.8 with confidence 1.119\n",
      "Motor found in tomo_003acc at position: z=217, y=1196, x=1071\n",
      "Current detection rate: 1/1 (100.0%)\n",
      "\n",
      "Processing tomogram 2/3: tomo_00e047\n",
      "Processing tomogram tomo_00e047 with progressive sampling\n",
      "Found 300 total slices for tomogram tomo_00e047\n",
      "STAGE 1: Performing coarse sampling with 60 slices (20.0%)\n",
      "[TIMER] Coarse inference: 5.075s\n",
      "STAGE 2: Found 1 potential detections in coarse scan\n",
      "Sampling 49 additional slices in region of interest\n",
      "Total detections before NMS: 50\n",
      "Detections after NMS: 11\n",
      "Motor found in tomo_00e047 at position: z=166.0, y=503.5, x=517.9 with confidence 0.758\n",
      "Motor found in tomo_00e047 at position: z=166, y=504, x=518\n",
      "Current detection rate: 2/2 (100.0%)\n",
      "\n",
      "Processing tomogram 3/3: tomo_01a877\n",
      "Processing tomogram tomo_01a877 with progressive sampling\n",
      "Found 300 total slices for tomogram tomo_01a877\n",
      "STAGE 1: Performing coarse sampling with 60 slices (20.0%)\n",
      "[TIMER] Coarse inference: 4.325s\n",
      "STAGE 2: Found 1 potential detections in coarse scan\n",
      "Sampling 48 additional slices in region of interest\n",
      "Total detections before NMS: 49\n",
      "Detections after NMS: 15\n",
      "Motor found in tomo_01a877 at position: z=154.0, y=504.8, x=510.1 with confidence 0.709\n",
      "Motor found in tomo_01a877 at position: z=154, y=505, x=510\n",
      "Current detection rate: 3/3 (100.0%)\n",
      "\n",
      "Submission complete!\n",
      "Motors detected: 3/3 (100.0%)\n",
      "Submission saved to: /kaggle/working/submission.csv\n",
      "\n",
      "Submission preview:\n",
      "       tomo_id  Motor axis 0  Motor axis 1  Motor axis 2\n",
      "0  tomo_003acc           217          1196          1071\n",
      "1  tomo_00e047           166           504           518\n",
      "2  tomo_01a877           154           505           510\n",
      "\n",
      "Total execution time: 36315.32 seconds (605.26 minutes)\n",
      "\n",
      "Total execution time: 36315.32 seconds (605.26 minutes)\n"
     ]
    }
   ],
   "source": [
    "# Run the full pipeline\n",
    "if __name__ == \"__main__\":\n",
    "    # Time entire process\n",
    "    start_time = time.time()\n",
    "    \n",
    "    # Run pipeline\n",
    "    submission = run_pipeline()\n",
    "    \n",
    "    # Print total execution time\n",
    "    elapsed = time.time() - start_time\n",
    "    print(f\"\\nTotal execution time: {elapsed:.2f} seconds ({elapsed/60:.2f} minutes)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9fa8f7ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T10:56:33.742687Z",
     "iopub.status.busy": "2025-04-28T10:56:33.742444Z",
     "iopub.status.idle": "2025-04-28T10:56:33.746373Z",
     "shell.execute_reply": "2025-04-28T10:56:33.745772Z"
    },
    "papermill": {
     "duration": 0.06909,
     "end_time": "2025-04-28T10:56:33.747477",
     "exception": false,
     "start_time": "2025-04-28T10:56:33.678387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FINISHED\n"
     ]
    }
   ],
   "source": [
    "print('FINISHED')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 11294684,
     "sourceId": 91249,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 36338.044637,
   "end_time": "2025-04-28T10:56:36.979051",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-28T00:50:58.934414",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
